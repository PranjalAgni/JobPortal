{"ast":null,"code":"import { userConstants } from './userConstants';\nimport { userService } from './userServices';\nimport { alertActions } from '../alert/alertActions';\nimport { history } from '../../_helpers/history';\nexport const userActions = {\n  login,\n  logout,\n  register,\n  getAllUsers,\n  editUser,\n  deleteUser,\n  banUser\n};\n\nfunction login(email, password) {\n  return dispatch => {\n    dispatch(request({\n      email\n    }));\n    userService.login(email, password).then(user => {\n      if (user === false) {\n        dispatch(alertActions.error('Credential not valid'));\n      } else if (user === 'null') {\n        dispatch(alertActions.error(\"Credential not valid\"));\n      } else if (user === 'ban') {\n        dispatch(alertActions.error(\"You are banned! Please contact admin@jobportal.com\"));\n      } else {\n        dispatch(alertActions.success('Login Successful'));\n        dispatch(success(user));\n        history.push('/');\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  history.push('/');\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(fullname, email, password, phone, gender) {\n  return dispatch => {\n    dispatch(request(email));\n    password = btoa(password);\n    userService.register(fullname, email, password, phone, gender).then(user => {\n      console.log(user);\n\n      if (user === 'User exists') {\n        dispatch(alertActions.error(user));\n      } else {\n        dispatch(alertActions.success('Registration successful'));\n        dispatch(success(user));\n        history.push('/login');\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAllUsers() {\n  return dispatch => {\n    dispatch(request());\n    userService.getAllUsers().then(users => {\n      dispatch(success(users));\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(users) {\n    return {\n      type: userConstants.GET_ALL_USERS_REQUEST,\n      users\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GET_ALL_USERS_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GET_ALL_USERS_FAILURE,\n      error\n    };\n  }\n}\n\nfunction editUser(name, emailId, password, phone, _id) {\n  return dispatch => {\n    dispatch(request(name, emailId, password, phone, _id));\n    userService.editUser(name, emailId, password, phone, _id).then(response => {\n      if (response === true) {\n        dispatch(success(response));\n        dispatch(alertActions.success('User edited successfully!!!'));\n      } else {\n        dispatch(alertActions.error('Unable to edit user!'));\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(...users) {\n    return {\n      type: userConstants.EDIT_USER_REQUEST,\n      users\n    };\n  }\n\n  function success(response) {\n    return {\n      type: userConstants.EDIT_USER_SUCCESS,\n      response\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.EDIT_USER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction deleteUser(_id) {\n  return dispatch => {\n    dispatch(request(_id));\n    userService.deleteUser(_id).then(response => {\n      if (response === true) {\n        dispatch(success(response));\n        dispatch(alertActions.success('User deleted successfully!!!'));\n      } else {\n        dispatch(alertActions.error('Unable to delete user!'));\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_USER_REQUEST,\n      id\n    };\n  }\n\n  function success(response) {\n    return {\n      type: userConstants.DELETE_USER_SUCCESS,\n      response\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.DELETE_USER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction banUser(_id, userStatus) {\n  return dispatch => {\n    dispatch(request(_id, userStatus));\n    userService.banUser(_id, userStatus).then(response => {\n      if (response === 'ban') {\n        dispatch(success(response));\n        dispatch(alertActions.success('User banned successfully!!!'));\n      } else if (response === 'unban') {\n        dispatch(success(response));\n        dispatch(alertActions.success('User unbanned successfully!!!'));\n      } else {\n        dispatch(alertActions.error('Unable to ban user!'));\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.BAN_USER_REQUEST,\n      id\n    };\n  }\n\n  function success(response) {\n    return {\n      type: userConstants.BAN_USER_SUCCESS,\n      response\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.BAN_USER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/user/Navigation-and-api-integration/client/src/redux/user/userActions.js"],"names":["userConstants","userService","alertActions","history","userActions","login","logout","register","getAllUsers","editUser","deleteUser","banUser","email","password","dispatch","request","then","user","error","success","push","catch","failure","message","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","fullname","phone","gender","btoa","console","log","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","users","GET_ALL_USERS_REQUEST","GET_ALL_USERS_SUCCESS","GET_ALL_USERS_FAILURE","name","emailId","_id","response","EDIT_USER_REQUEST","EDIT_USER_SUCCESS","EDIT_USER_FAILURE","id","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","userStatus","BAN_USER_REQUEST","BAN_USER_SUCCESS","BAN_USER_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from './userConstants';\nimport { userService } from './userServices';\nimport { alertActions } from '../alert/alertActions'\nimport { history } from '../../_helpers/history';\n\n\nexport const userActions = {\n  login,\n  logout,\n  register,\n  getAllUsers,\n  editUser,\n  deleteUser,\n  banUser,\n};\n\nfunction login(email, password) {\n  return dispatch => {\n    dispatch(request({ email }));\n    userService.login(email, password)\n      .then((user) => {\n        if (user === false) {\n          dispatch(alertActions.error('Credential not valid'))\n        } else if(user === 'null') {\n          dispatch(alertActions.error(\"Credential not valid\"));\n        } else if(user === 'ban') {\n          dispatch(alertActions.error(\"You are banned! Please contact admin@jobportal.com\"));\n        } else {\n          dispatch(alertActions.success('Login Successful'))\n          dispatch(success(user));\n          history.push('/');\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n\n  function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n  function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n  function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n  userService.logout();\n  history.push('/')\n  return { type: userConstants.LOGOUT };\n}\n\nfunction register(fullname, email, password, phone, gender) {\n  return dispatch => {\n    dispatch(request(email));\n    password = btoa(password)\n    userService.register(fullname, email, password, phone, gender)\n      .then((user) => {\n        console.log(user)\n        if (user === 'User exists') {\n          dispatch(alertActions.error(user));\n        } else {\n          dispatch(alertActions.success('Registration successful'));\n          dispatch(success(user));\n          history.push('/login');\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      })\n  };\n\n  function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n  function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n  function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAllUsers() {\n  return dispatch => {\n    dispatch(request());\n    userService.getAllUsers()\n      .then((users) => {\n        dispatch(success(users));\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      })\n  };\n\n  function request(users) { return { type: userConstants.GET_ALL_USERS_REQUEST, users } }\n  function success(users) { return { type: userConstants.GET_ALL_USERS_SUCCESS, users } }\n  function failure(error) { return { type: userConstants.GET_ALL_USERS_FAILURE, error } }\n}\n\nfunction editUser(name, emailId, password, phone, _id) {\n  return dispatch => {\n    dispatch(request(name, emailId, password, phone, _id));\n    userService.editUser(name, emailId, password, phone, _id)\n      .then((response) => {\n        if (response === true) {\n          dispatch(success(response));\n          dispatch(alertActions.success('User edited successfully!!!'))\n        } else {\n          dispatch(alertActions.error('Unable to edit user!'))\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      })\n  };\n\n  function request(...users) { return { type: userConstants.EDIT_USER_REQUEST, users } }\n  function success(response) { return { type: userConstants.EDIT_USER_SUCCESS, response } }\n  function failure(error) { return { type: userConstants.EDIT_USER_FAILURE, error } }\n}\n\nfunction deleteUser(_id) {\n  return dispatch => {\n    dispatch(request(_id));\n    userService.deleteUser(_id)\n      .then((response) => {\n        if (response === true) {\n          dispatch(success(response));\n          dispatch(alertActions.success('User deleted successfully!!!'))\n        } else {\n          dispatch(alertActions.error('Unable to delete user!'))\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      })\n  };\n\n  function request(id) { return { type: userConstants.DELETE_USER_REQUEST, id } }\n  function success(response) { return { type: userConstants.DELETE_USER_SUCCESS, response } }\n  function failure(error) { return { type: userConstants.DELETE_USER_FAILURE, error } }\n}\n\nfunction banUser(_id, userStatus) {\n  return dispatch => {\n    dispatch(request(_id, userStatus));\n    userService.banUser(_id, userStatus)\n      .then((response) => {\n        if (response === 'ban') {\n          dispatch(success(response));\n          dispatch(alertActions.success('User banned successfully!!!'))\n        } else if (response === 'unban') {\n          dispatch(success(response));\n          dispatch(alertActions.success('User unbanned successfully!!!'))\n        } else {\n          dispatch(alertActions.error('Unable to ban user!'))\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error));\n      })\n  };\n\n  function request(id) { return { type: userConstants.BAN_USER_REQUEST, id } }\n  function success(response) { return { type: userConstants.BAN_USER_SUCCESS, response } }\n  function failure(error) { return { type: userConstants.BAN_USER_FAILURE, error } }\n}"]},"metadata":{},"sourceType":"module"}