{"ast":null,"code":"var _jsxFileName = \"/home/user/Navigation-and-api-integration/client/src/components/body.component.js\";\nimport React from 'react';\nimport { Filter } from '../containers/body';\nimport { Card } from '../containers/body';\nimport isLoggedIn from '../isLoggedIn';\nimport { bodyActions } from '../redux/body/bodyActions';\nimport { Pagination } from '../containers/body';\nimport { paginationActions } from '../redux/pagination/paginationActions';\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.filterMachine = filterJob => {\n      try {\n        if (this.state.user.role === 1) {\n          this.setState({\n            roleBasedJobs: filterJob\n          });\n        }\n      } catch (error) {\n        console.log(\"Not a company\");\n      }\n\n      this.setState({\n        jobsData: filterJob\n      });\n    };\n\n    this.handleRemoveLogic = value => {\n      if (value === true) {\n        const dispatch = this.props.dispatch;\n        dispatch(paginationActions.getPageData());\n        dispatch(bodyActions.getJobs(1));\n      }\n    };\n\n    this.state = {\n      jobsData: [],\n      roleBasedJobs: [],\n      user: JSON.parse(localStorage.getItem('currentUser'))\n    };\n  }\n\n  componentDidMount() {\n    const dispatch = this.props.dispatch;\n    dispatch(paginationActions.getPageData());\n    dispatch(bodyActions.getJobs(1));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const jobs = nextProps.jobs,\n          currentPageData = nextProps.currentPageData;\n\n    try {\n      const filterJobsByComp = currentPageData.filter(ele => {\n        if (this.state.user.name === ele.company) {\n          return true;\n        }\n\n        return false;\n      });\n      this.setState({\n        jobsData: jobs,\n        toFilter: jobs,\n        roleBasedJobs: filterJobsByComp,\n        roleBasedFilter: filterJobsByComp\n      });\n\n      if (nextProps.jobs !== this.jobsData) {\n        this.setState({\n          roleBasedJobs: filterJobsByComp\n        });\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n\n    this.setState({\n      jobsData: jobs,\n      toFilter: jobs\n    });\n  }\n\n  render() {\n    const jobs = this.props.jobs;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, !isLoggedIn() && React.createElement(Filter, {\n      filteredData: this.filterMachine,\n      data_filter: this.state.toFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), isLoggedIn() && this.state.user.role === 2 && React.createElement(Filter, {\n      filteredData: this.filterMachine,\n      data_filter: this.state.toFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), isLoggedIn() && this.state.user.role === 0 && React.createElement(Filter, {\n      filteredData: this.filterMachine,\n      data_filter: this.state.toFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), isLoggedIn() && this.state.user.role === 1 && React.createElement(Filter, {\n      filteredData: this.filterMachine,\n      data_filter: this.state.roleBasedFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), jobs && !isLoggedIn() && React.createElement(Card, {\n      data: this.state.jobsData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), jobs && isLoggedIn() && this.state.user.role === 1 && React.createElement(Card, {\n      data: this.state.roleBasedJobs,\n      handleRemove: this.handleRemoveLogic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), jobs && isLoggedIn() && this.state.user.role === 2 && React.createElement(Card, {\n      data: this.state.jobsData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), jobs && isLoggedIn() && this.state.user.role === 0 && React.createElement(Card, {\n      data: this.state.jobsData,\n      handleRemove: this.handleRemoveLogic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), isLoggedIn() && React.createElement(Pagination, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), !isLoggedIn() && React.createElement(Pagination, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["/home/user/Navigation-and-api-integration/client/src/components/body.component.js"],"names":["React","Filter","Card","isLoggedIn","bodyActions","Pagination","paginationActions","Body","Component","constructor","props","filterMachine","filterJob","state","user","role","setState","roleBasedJobs","error","console","log","jobsData","handleRemoveLogic","value","dispatch","getPageData","getJobs","JSON","parse","localStorage","getItem","componentDidMount","componentWillReceiveProps","nextProps","jobs","currentPageData","filterJobsByComp","filter","ele","name","company","toFilter","roleBasedFilter","message","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,iBAAT,QAAkC,uCAAlC;;AAEA,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA4CnBC,aA5CmB,GA4CFC,SAAD,IAAe;AAC7B,UAAI;AACF,YAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAA7B,EAAgC;AAC9B,eAAKC,QAAL,CAAc;AACZC,YAAAA,aAAa,EAAEL;AADH,WAAd;AAGD;AACF,OAND,CAME,OAAOM,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AACD,WAAKJ,QAAL,CAAc;AACZK,QAAAA,QAAQ,EAAET;AADE,OAAd;AAGD,KAzDkB;;AAAA,SA2DnBU,iBA3DmB,GA2DEC,KAAD,IAAW;AAC7B,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAAA,cACVC,QADU,GACG,KAAKd,KADR,CACVc,QADU;AAElBA,QAAAA,QAAQ,CAAClB,iBAAiB,CAACmB,WAAlB,EAAD,CAAR;AACAD,QAAAA,QAAQ,CAACpB,WAAW,CAACsB,OAAZ,CAAoB,CAApB,CAAD,CAAR;AACD;AACF,KAjEkB;;AAEjB,SAAKb,KAAL,GAAa;AACXQ,MAAAA,QAAQ,EAAE,EADC;AAEXJ,MAAAA,aAAa,EAAE,EAFJ;AAGXH,MAAAA,IAAI,EAAEa,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX;AAHK,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,UACVP,QADU,GACG,KAAKd,KADR,CACVc,QADU;AAElBA,IAAAA,QAAQ,CAAClB,iBAAiB,CAACmB,WAAlB,EAAD,CAAR;AACAD,IAAAA,QAAQ,CAACpB,WAAW,CAACsB,OAAZ,CAAoB,CAApB,CAAD,CAAR;AACD;;AAEDM,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AAAA,UAC3BC,IAD2B,GACDD,SADC,CAC3BC,IAD2B;AAAA,UACrBC,eADqB,GACDF,SADC,CACrBE,eADqB;;AAEnC,QAAI;AACF,YAAMC,gBAAgB,GAAGD,eAAe,CAACE,MAAhB,CAAwBC,GAAD,IAAS;AACvD,YAAI,KAAKzB,KAAL,CAAWC,IAAX,CAAgByB,IAAhB,KAAyBD,GAAG,CAACE,OAAjC,EAA0C;AACxC,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALwB,CAAzB;AAMA,WAAKxB,QAAL,CAAc;AACZK,QAAAA,QAAQ,EAAEa,IADE;AAEZO,QAAAA,QAAQ,EAAEP,IAFE;AAGZjB,QAAAA,aAAa,EAAEmB,gBAHH;AAIZM,QAAAA,eAAe,EAAEN;AAJL,OAAd;;AAMA,UAAIH,SAAS,CAACC,IAAV,KAAmB,KAAKb,QAA5B,EAAsC;AACpC,aAAKL,QAAL,CAAc;AACZC,UAAAA,aAAa,EAAEmB;AADH,SAAd;AAGD;AACF,KAlBD,CAkBE,OAAOlB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACyB,OAAlB;AACD;;AACD,SAAK3B,QAAL,CAAc;AACZK,MAAAA,QAAQ,EAAEa,IADE;AAEZO,MAAAA,QAAQ,EAAEP;AAFE,KAAd;AAID;;AAyBDU,EAAAA,MAAM,GAAG;AAAA,UACCV,IADD,GACU,KAAKxB,KADf,CACCwB,IADD;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,CAAC/B,UAAU,EAAX,IAAiB,oBAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKQ,aAA3B;AAA0C,MAAA,WAAW,EAAE,KAAKE,KAAL,CAAW4B,QAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB,EAKItC,UAAU,MAAM,KAAKU,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAAzC,IAA8C,oBAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKJ,aAA3B;AAA0C,MAAA,WAAW,EAAE,KAAKE,KAAL,CAAW4B,QAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALlD,EAQItC,UAAU,MAAM,KAAKU,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAAzC,IAA8C,oBAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKJ,aAA3B;AAA0C,MAAA,WAAW,EAAE,KAAKE,KAAL,CAAW4B,QAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARlD,EAWItC,UAAU,MAAM,KAAKU,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAAzC,IAA8C,oBAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKJ,aAA3B;AAA0C,MAAA,WAAW,EAAE,KAAKE,KAAL,CAAW6B,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXlD,EAcIR,IAAI,IAAI,CAAC/B,UAAU,EAAnB,IAAyB,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKU,KAAL,CAAWQ,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAd7B,EAiBIa,IAAI,IAAI/B,UAAU,EAAlB,IAAwB,KAAKU,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAAjD,IAAsD,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWI,aAAvB;AAAsC,MAAA,YAAY,EAAE,KAAKK,iBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjB1D,EAoBIY,IAAI,IAAI/B,UAAU,EAAlB,IAAwB,KAAKU,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAAjD,IAAsD,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWQ,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApB1D,EAuBIa,IAAI,IAAI/B,UAAU,EAAlB,IAAwB,KAAKU,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,CAAjD,IAAsD,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWQ,QAAvB;AAAiC,MAAA,YAAY,EAAE,KAAKC,iBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvB1D,EAyBGnB,UAAU,MAAM,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBnB,EA0BG,CAACA,UAAU,EAAX,IAAiB,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BpB,CADF;AA8BD;;AApGgC;;AAuGnC,eAAeI,IAAf","sourcesContent":["import React from 'react'\nimport { Filter } from '../containers/body'\nimport { Card } from '../containers/body'\nimport isLoggedIn from '../isLoggedIn'\nimport { bodyActions } from '../redux/body/bodyActions'\nimport { Pagination } from '../containers/body'\nimport { paginationActions } from '../redux/pagination/paginationActions';\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobsData: [],\n      roleBasedJobs: [],\n      user: JSON.parse(localStorage.getItem('currentUser'))\n    }\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(paginationActions.getPageData());\n    dispatch(bodyActions.getJobs(1))\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { jobs, currentPageData } = nextProps;\n    try {\n      const filterJobsByComp = currentPageData.filter((ele) => {\n        if (this.state.user.name === ele.company) {\n          return true;\n        }\n        return false;\n      })\n      this.setState({\n        jobsData: jobs,\n        toFilter: jobs,\n        roleBasedJobs: filterJobsByComp,\n        roleBasedFilter: filterJobsByComp\n      })\n      if (nextProps.jobs !== this.jobsData) {\n        this.setState({\n          roleBasedJobs: filterJobsByComp\n        })\n      }\n    } catch (error) {\n      console.log(error.message)\n    }\n    this.setState({\n      jobsData: jobs,\n      toFilter: jobs,\n    })\n  }\n\n  filterMachine = (filterJob) => {\n    try {\n      if (this.state.user.role === 1) {\n        this.setState({\n          roleBasedJobs: filterJob,\n        })\n      }\n    } catch (error) {\n      console.log(\"Not a company\")\n    }\n    this.setState({\n      jobsData: filterJob\n    })\n  }\n\n  handleRemoveLogic = (value) => {\n    if (value === true) {\n      const { dispatch } = this.props;\n      dispatch(paginationActions.getPageData());\n      dispatch(bodyActions.getJobs(1))\n    }\n  }\n\n  render() {\n    const { jobs } = this.props\n    return (\n      <div>\n        {\n          !isLoggedIn() && <Filter filteredData={this.filterMachine} data_filter={this.state.toFilter} />\n        }\n        {\n          isLoggedIn() && this.state.user.role === 2 && <Filter filteredData={this.filterMachine} data_filter={this.state.toFilter} />\n        }\n        {\n          isLoggedIn() && this.state.user.role === 0 && <Filter filteredData={this.filterMachine} data_filter={this.state.toFilter} />\n        }\n        {\n          isLoggedIn() && this.state.user.role === 1 && <Filter filteredData={this.filterMachine} data_filter={this.state.roleBasedFilter} />\n        }\n        {\n          jobs && !isLoggedIn() && <Card data={this.state.jobsData} />\n        }\n        {\n          jobs && isLoggedIn() && this.state.user.role === 1 && <Card data={this.state.roleBasedJobs} handleRemove={this.handleRemoveLogic} />\n        }\n        {\n          jobs && isLoggedIn() && this.state.user.role === 2 && <Card data={this.state.jobsData} />\n        }\n        {\n          jobs && isLoggedIn() && this.state.user.role === 0 && <Card data={this.state.jobsData} handleRemove={this.handleRemoveLogic} />\n        }\n        {isLoggedIn() && <Pagination />}\n        {!isLoggedIn() && <Pagination />}\n      </div>\n    )\n  }\n}\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}