{"ast":null,"code":"import { chatService } from './chatService';\nimport { chatConstants } from './chatConstants';\nimport { alertActions } from '../alert/alertActions';\nexport const chatActions = {\n  saveMessage,\n  getMessages\n};\n\nfunction saveMessage(sender, receiver, message, date) {\n  return dispatch => {\n    dispatch(request(sender, receiver, message, date));\n    chatService.saveMessage(sender, receiver, message, date).then(data => {\n      dispatch(success(data));\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request() {\n    return {\n      type: chatConstants.MESSAGE_SAVE_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: chatConstants.MESSAGE_SAVE_SUCCESS,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: chatConstants.MESSAGE_SAVE_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getMessages(sender, receiver) {\n  return dispatch => {\n    dispatch(request(sender, receiver));\n    chatService.getMessages(sender, receiver).then(data => {\n      dispatch(success(data));\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request() {\n    return {\n      type: chatConstants.GET_MESSAGE_REQUEST\n    };\n  }\n\n  function success(data) {\n    return {\n      type: chatConstants.GET_MESSAGE_SUCCESS,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: chatConstants.GET_MESSAGE_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/user/Navigation-and-api-integration/client/src/redux/chat/chatActions.js"],"names":["chatService","chatConstants","alertActions","chatActions","saveMessage","getMessages","sender","receiver","message","date","dispatch","request","then","data","success","catch","error","failure","type","MESSAGE_SAVE_REQUEST","MESSAGE_SAVE_SUCCESS","MESSAGE_SAVE_FAILURE","GET_MESSAGE_REQUEST","GET_MESSAGE_SUCCESS","GET_MESSAGE_FAILURE"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,WADyB;AAEzBC,EAAAA;AAFyB,CAApB;;AAKP,SAASD,WAAT,CAAqBE,MAArB,EAA6BC,QAA7B,EAAuCC,OAAvC,EAAgDC,IAAhD,EAAsD;AACpD,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,OAAO,CAACL,MAAD,EAASC,QAAT,EAAmBC,OAAnB,EAA4BC,IAA5B,CAAR,CAAR;AACAT,IAAAA,WAAW,CAACI,WAAZ,CAAwBE,MAAxB,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,IAAnD,EACGG,IADH,CACSC,IAAD,IAAU;AACdH,MAAAA,QAAQ,CAACI,OAAO,CAACD,IAAD,CAAR,CAAR;AACD,KAHH,EAIGE,KAJH,CAIUC,KAAD,IAAW;AAChBN,MAAAA,QAAQ,CAACO,OAAO,CAACD,KAAD,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACR,YAAY,CAACc,KAAb,CAAmBA,KAAK,CAACR,OAAzB,CAAD,CAAR;AACD,KAPH;AAQD,GAVD;;AAYA,WAASG,OAAT,GAAmB;AAAE,WAAO;AAAEO,MAAAA,IAAI,EAAEjB,aAAa,CAACkB;AAAtB,KAAP;AAAqD;;AAC1E,WAASL,OAAT,CAAiBD,IAAjB,EAAuB;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAEjB,aAAa,CAACmB,oBAAtB;AAA4CP,MAAAA;AAA5C,KAAP;AAA2D;;AACpF,WAASI,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAEjB,aAAa,CAACoB,oBAAtB;AAA4CL,MAAAA;AAA5C,KAAP;AAA4D;AACvF;;AAED,SAASX,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AACrC,SAAOG,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,OAAO,CAACL,MAAD,EAASC,QAAT,CAAR,CAAR;AACAP,IAAAA,WAAW,CAACK,WAAZ,CAAwBC,MAAxB,EAAgCC,QAAhC,EACGK,IADH,CACSC,IAAD,IAAU;AACdH,MAAAA,QAAQ,CAACI,OAAO,CAACD,IAAD,CAAR,CAAR;AACD,KAHH,EAIGE,KAJH,CAIUC,KAAD,IAAW;AAChBN,MAAAA,QAAQ,CAACO,OAAO,CAACD,KAAD,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACR,YAAY,CAACc,KAAb,CAAmBA,KAAK,CAACR,OAAzB,CAAD,CAAR;AACD,KAPH;AAQD,GAVD;;AAYA,WAASG,OAAT,GAAmB;AAAE,WAAO;AAAEO,MAAAA,IAAI,EAAEjB,aAAa,CAACqB;AAAtB,KAAP;AAAoD;;AACzE,WAASR,OAAT,CAAiBD,IAAjB,EAAuB;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAEjB,aAAa,CAACsB,mBAAtB;AAA2CV,MAAAA;AAA3C,KAAP;AAA0D;;AACnF,WAASI,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAEjB,aAAa,CAACuB,mBAAtB;AAA2CR,MAAAA;AAA3C,KAAP;AAA2D;AACtF","sourcesContent":["import { chatService } from './chatService'\nimport { chatConstants } from './chatConstants'\nimport { alertActions } from '../alert/alertActions'\n\nexport const chatActions = {\n  saveMessage,\n  getMessages\n};\n\nfunction saveMessage(sender, receiver, message, date) {\n  return dispatch => {\n    dispatch(request(sender, receiver, message, date));\n    chatService.saveMessage(sender, receiver, message, date)\n      .then((data) => {\n        dispatch(success(data));\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n\n  function request() { return { type: chatConstants.MESSAGE_SAVE_REQUEST } }\n  function success(data) { return { type: chatConstants.MESSAGE_SAVE_SUCCESS, data } }\n  function failure(error) { return { type: chatConstants.MESSAGE_SAVE_FAILURE, error } }\n}\n\nfunction getMessages(sender, receiver) {\n  return dispatch => {\n    dispatch(request(sender, receiver));\n    chatService.getMessages(sender, receiver)\n      .then((data) => {\n        dispatch(success(data))\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n\n  function request() { return { type: chatConstants.GET_MESSAGE_REQUEST } }\n  function success(data) { return { type: chatConstants.GET_MESSAGE_SUCCESS, data } }\n  function failure(error) { return { type: chatConstants.GET_MESSAGE_FAILURE, error } }\n}"]},"metadata":{},"sourceType":"module"}