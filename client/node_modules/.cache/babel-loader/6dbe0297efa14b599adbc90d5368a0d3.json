{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar _isType = require(\"./isType\");\n\nvar isObject = _isType.isObject;\nvar isString = _isType.isString;\n/**\n * Represents an Item of an Enum.\n * @param {String} key   The Enum key.\n * @param {Number} value The Enum value.\n */\n\nvar EnumItem = function () {\n  /*constructor reference so that, this.constructor===EnumItem//=>true */\n  function EnumItem(key, value) {\n    var options = arguments[2] === undefined ? {} : arguments[2];\n\n    _classCallCheck(this, EnumItem);\n\n    this.key = key;\n    this.value = value;\n    this._options = options;\n    this._options.ignoreCase = this._options.ignoreCase || false;\n  }\n  /**\n   * Checks if the flagged EnumItem has the passing object.\n   * @param  {EnumItem || String || Number} value The object to check with.\n   * @return {Boolean}                            The check result.\n   */\n\n\n  EnumItem.prototype.has = function has(value) {\n    if (EnumItem.isEnumItem(value)) {\n      return (this.value & value.value) !== 0;\n    } else if (isString(value)) {\n      if (this._options.ignoreCase) {\n        return this.key.toLowerCase().indexOf(value.toLowerCase()) >= 0;\n      }\n\n      return this.key.indexOf(value) >= 0;\n    } else {\n      return (this.value & value) !== 0;\n    }\n  };\n  /**\n   * Checks if the EnumItem is the same as the passing object.\n   * @param  {EnumItem || String || Number} key The object to check with.\n   * @return {Boolean}                          The check result.\n   */\n\n\n  EnumItem.prototype.is = function is(key) {\n    if (EnumItem.isEnumItem(key)) {\n      return this.key === key.key;\n    } else if (isString(key)) {\n      if (this._options.ignoreCase) {\n        return this.key.toLowerCase() === key.toLowerCase();\n      }\n\n      return this.key === key;\n    } else {\n      return this.value === key;\n    }\n  };\n  /**\n   * Returns String representation of this EnumItem.\n   * @return {String} String representation of this EnumItem.\n   */\n\n\n  EnumItem.prototype.toString = function toString() {\n    return this.key;\n  };\n  /**\n   * Returns JSON object representation of this EnumItem.\n   * @return {String} JSON object representation of this EnumItem.\n   */\n\n\n  EnumItem.prototype.toJSON = function toJSON() {\n    return this.key;\n  };\n  /**\n   * Returns the value to compare with.\n   * @return {String} The value to compare with.\n   */\n\n\n  EnumItem.prototype.valueOf = function valueOf() {\n    return this.value;\n  };\n\n  EnumItem.isEnumItem = function isEnumItem(value) {\n    return value instanceof EnumItem || isObject(value) && value.key !== undefined && value.value !== undefined;\n  };\n\n  return EnumItem;\n}();\n\nmodule.exports = EnumItem;","map":null,"metadata":{},"sourceType":"script"}