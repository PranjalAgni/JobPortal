{"ast":null,"code":"import { jobService } from './jobService';\nimport { jobConstants } from './jobConstants';\nimport { history } from '../../_helpers/history';\nimport { alertActions } from '../alert/alertActions';\nimport { paginationActions } from '../pagination/paginationActions';\nexport const jobAction = {\n  addJob,\n  editJob,\n  updateJob,\n  applyJob,\n  getAppliedJob,\n  removeJob,\n  updateStatus\n};\n\nfunction addJob(company, profile, designation, salary, city, data) {\n  return dispatch => {\n    dispatch(request(company));\n    jobService.addJob(company, profile, designation, salary, city, data).then(job => {\n      if (job === true) {\n        dispatch(alertActions.error('Job Exists'));\n      } else {\n        dispatch(success(job));\n        history.push('/');\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(job) {\n    return {\n      type: jobConstants.ADD_JOB_REQUEST,\n      job\n    };\n  }\n\n  function success(job) {\n    return {\n      type: jobConstants.ADD_JOB_SUCCESS,\n      job\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.ADD_JOB_FAILURE,\n      error\n    };\n  }\n}\n\nfunction editJob(id) {\n  return dispatch => {\n    console.log(id);\n    dispatch(request(id));\n    jobService.editJob(id).then(async job => {\n      await dispatch(success(job));\n      history.push('/updatejob');\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(job) {\n    return {\n      type: jobConstants.EDIT_JOB_REQUEST,\n      job\n    };\n  }\n\n  function success(job) {\n    return {\n      type: jobConstants.EDIT_JOB_SUCCESS,\n      job\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.EDIT_JOB_FAILURE,\n      error\n    };\n  }\n}\n\nfunction updateJob(id, company, profileType, designation, annualSalary, city) {\n  return dispatch => {\n    dispatch(request(id));\n    jobService.updateJob(id, company, profileType, designation, annualSalary, city).then(job => {\n      if (job !== null) {\n        dispatch(alertActions.success('Job successfully updated'));\n        dispatch(success(job));\n        history.push('/');\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(job) {\n    return {\n      type: jobConstants.UPDATE_JOB_REQUEST,\n      job\n    };\n  }\n\n  function success(job) {\n    return {\n      type: jobConstants.UPDATE_JOB_SUCCESS,\n      job\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.UPDATE_JOB_FAILURE,\n      error\n    };\n  }\n}\n\nfunction applyJob(id, name, gender) {\n  return dispatch => {\n    dispatch(request(true));\n    jobService.applyJob(id, name, gender).then(res => {\n      console.log(res);\n\n      if (res === 'Successful') {\n        dispatch(alertActions.success('Job successfully applied'));\n        setTimeout(() => {\n          dispatch(success(res));\n          history.push('/');\n        }, 500);\n      } else {\n        dispatch(alertActions.error(res));\n      }\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(res) {\n    return {\n      type: jobConstants.APPLY_JOB_REQUEST,\n      res\n    };\n  }\n\n  function success(res) {\n    return {\n      type: jobConstants.APPLY_JOB_SUCCESS,\n      res\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.APPLY_JOB_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAppliedJob(name) {\n  return dispatch => {\n    dispatch(request(name));\n    jobService.getAppliedJob(name).then(res => {\n      dispatch(success(res));\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request() {\n    return {\n      type: jobConstants.GET_APPLIED_JOB_REQUEST\n    };\n  }\n\n  function success(res) {\n    return {\n      type: jobConstants.GET_APPLIED_JOB_SUCCESS,\n      res\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.GET_APPLIED_JOB_FAILURE,\n      error\n    };\n  }\n}\n\nfunction removeJob(id) {\n  return dispatch => {\n    dispatch(request(id));\n    jobService.removeJob(id).then(res => {\n      console.log(res);\n      dispatch(paginationActions.getPageData());\n      dispatch(success(res));\n      history.push('/');\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(id) {\n    return {\n      type: jobConstants.REMOVE_JOB_REQUEST,\n      id\n    };\n  }\n\n  function success(res) {\n    return {\n      type: jobConstants.REMOVE_JOB_SUCCESS,\n      res\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.REMOVE_JOB_FAILURE,\n      error\n    };\n  }\n}\n\nfunction updateStatus(id, status) {\n  return dispatch => {\n    dispatch(request(id));\n    jobService.updateStatus(id, status).then(data => {\n      jobService.getMails().then(data => {\n        dispatch(success(data));\n        history.push('/');\n      }).catch(error => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      });\n    }).catch(error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error.message));\n    });\n  };\n\n  function request(id) {\n    return {\n      type: jobConstants.UPDATE_APPLIED_STATUS_REQUEST,\n      id\n    };\n  }\n\n  function success(data) {\n    return {\n      type: jobConstants.UPDATE_APPLIED_STATUS_SUCCESS,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: jobConstants.UPDATE_APPLIED_STATUS_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/user/Navigation-and-api-integration/client/src/redux/addJob/jobActions.js"],"names":["jobService","jobConstants","history","alertActions","paginationActions","jobAction","addJob","editJob","updateJob","applyJob","getAppliedJob","removeJob","updateStatus","company","profile","designation","salary","city","data","dispatch","request","then","job","error","success","push","catch","failure","message","type","ADD_JOB_REQUEST","ADD_JOB_SUCCESS","ADD_JOB_FAILURE","id","console","log","EDIT_JOB_REQUEST","EDIT_JOB_SUCCESS","EDIT_JOB_FAILURE","profileType","annualSalary","UPDATE_JOB_REQUEST","UPDATE_JOB_SUCCESS","UPDATE_JOB_FAILURE","name","gender","res","setTimeout","APPLY_JOB_REQUEST","APPLY_JOB_SUCCESS","APPLY_JOB_FAILURE","GET_APPLIED_JOB_REQUEST","GET_APPLIED_JOB_SUCCESS","GET_APPLIED_JOB_FAILURE","getPageData","REMOVE_JOB_REQUEST","REMOVE_JOB_SUCCESS","REMOVE_JOB_FAILURE","status","getMails","UPDATE_APPLIED_STATUS_REQUEST","UPDATE_APPLIED_STATUS_SUCCESS","UPDATE_APPLIED_STATUS_FAILURE"],"mappings":"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","sourcesContent":["import { jobService } from './jobService'\nimport { jobConstants } from './jobConstants'\nimport { history } from '../../_helpers/history'\nimport { alertActions } from '../alert/alertActions'\nimport { paginationActions } from '../pagination/paginationActions';\n\nexport const jobAction = {\n  addJob,\n  editJob,\n  updateJob,\n  applyJob,\n  getAppliedJob,\n  removeJob,\n  updateStatus\n};\n\nfunction addJob(company, profile, designation, salary, city, data) {\n  return dispatch => {\n    dispatch(request(company));\n    jobService.addJob(company, profile, designation, salary, city, data)\n      .then((job) => {\n        if (job === true) {\n          dispatch(alertActions.error('Job Exists'))\n        } else {\n          dispatch(success(job))\n          history.push('/')\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n  function request(job) { return { type: jobConstants.ADD_JOB_REQUEST, job } }\n  function success(job) { return { type: jobConstants.ADD_JOB_SUCCESS, job } }\n  function failure(error) { return { type: jobConstants.ADD_JOB_FAILURE, error } }\n\n}\n\nfunction editJob(id) {\n  return dispatch => {\n    console.log(id)\n    dispatch(request(id));\n    jobService.editJob(id)\n      .then(async (job) => {\n        await dispatch(success(job))\n        history.push('/updatejob')\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n  function request(job) { return { type: jobConstants.EDIT_JOB_REQUEST, job } }\n  function success(job) { return { type: jobConstants.EDIT_JOB_SUCCESS, job } }\n  function failure(error) { return { type: jobConstants.EDIT_JOB_FAILURE, error } }\n\n}\n\nfunction updateJob(id, company, profileType, designation, annualSalary, city) {\n  return dispatch => {\n    dispatch(request(id));\n    jobService.updateJob(id, company, profileType, designation, annualSalary, city)\n      .then((job) => {\n        if (job !== null) {\n          dispatch(alertActions.success('Job successfully updated'))\n          dispatch(success(job))\n          history.push('/')\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n  function request(job) { return { type: jobConstants.UPDATE_JOB_REQUEST, job } }\n  function success(job) { return { type: jobConstants.UPDATE_JOB_SUCCESS, job } }\n  function failure(error) { return { type: jobConstants.UPDATE_JOB_FAILURE, error } }\n\n}\n\nfunction applyJob(id, name, gender) {\n  return dispatch => {\n    dispatch(request(true));\n    jobService.applyJob(id, name, gender)\n      .then((res) => {\n        console.log(res)\n        if (res === 'Successful') {\n          dispatch(alertActions.success('Job successfully applied'))\n          setTimeout(() => {\n            dispatch(success(res))\n            history.push('/')\n          }, 500)\n        } else {\n          dispatch(alertActions.error(res))\n        }\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n  function request(res) { return { type: jobConstants.APPLY_JOB_REQUEST, res } }\n  function success(res) { return { type: jobConstants.APPLY_JOB_SUCCESS, res } }\n  function failure(error) { return { type: jobConstants.APPLY_JOB_FAILURE, error } }\n}\n\nfunction getAppliedJob(name) {\n  return dispatch => {\n    dispatch(request(name));\n    jobService.getAppliedJob(name)\n      .then((res) => {\n        dispatch(success(res));\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n\n  function request() { return { type: jobConstants.GET_APPLIED_JOB_REQUEST } }\n  function success(res) { return { type: jobConstants.GET_APPLIED_JOB_SUCCESS, res } }\n  function failure(error) { return { type: jobConstants.GET_APPLIED_JOB_FAILURE, error } }\n}\n\nfunction removeJob(id) {\n  return dispatch => {\n    dispatch(request(id));\n    jobService.removeJob(id)\n      .then((res) => {\n        console.log(res)\n        dispatch(paginationActions.getPageData());\n        dispatch(success(res))\n        history.push('/')\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n\n  function request(id) { return { type: jobConstants.REMOVE_JOB_REQUEST, id } }\n  function success(res) { return { type: jobConstants.REMOVE_JOB_SUCCESS, res } }\n  function failure(error) { return { type: jobConstants.REMOVE_JOB_FAILURE, error } }\n}\n\nfunction updateStatus(id, status) {\n  return dispatch => {\n    dispatch(request(id));\n    jobService.updateStatus(id, status)\n      .then((data) => {\n        jobService.getMails()\n          .then((data) => {\n            dispatch(success(data))\n            history.push('/')\n          })\n          .catch((error) => {\n            dispatch(failure(error));\n            dispatch(alertActions.error(error.message));\n          })\n      })\n      .catch((error) => {\n        dispatch(failure(error));\n        dispatch(alertActions.error(error.message));\n      })\n  };\n\n  function request(id) { return { type: jobConstants.UPDATE_APPLIED_STATUS_REQUEST, id } }\n  function success(data) { return { type: jobConstants.UPDATE_APPLIED_STATUS_SUCCESS, data } }\n  function failure(error) { return { type: jobConstants.UPDATE_APPLIED_STATUS_FAILURE, error } }\n}"]},"metadata":{},"sourceType":"module"}