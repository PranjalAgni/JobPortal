{"ast":null,"code":"var _jsxFileName = \"/home/user/Navigation-and-api-integration/client/src/components/chat/ChatApp.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nimport config from '../../config';\nimport Messages from './Messages';\nimport ChatInput from './ChatInput';\nimport { chatActions } from '../../redux/chat/chatActions';\n\nclass ChatApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendHandler = message => {\n      if (message === true) {\n        this.socket.emit('typing');\n        this.socket.on('typing', data => {\n          this.props.handleTyping(message, data);\n          return () => {\n            this.socket.disconnect();\n          };\n        });\n      } else {\n        const messageObject = {\n          username: this.state.user.name,\n          to: this.props.username,\n          message\n        }; // Dispatch the messages to redux action to be saved into db\n\n        const sender = this.state.user.name;\n        const receiver = this.props.username;\n        const date = new Date().toString();\n        const dispatch = this.props.dispatch;\n        dispatch(chatActions.saveMessage(sender, receiver, message, date)); // Emit the message to the server\n\n        this.socket.emit('client:message', messageObject);\n        messageObject.fromMe = true;\n        this.addMessage(messageObject);\n      }\n    };\n\n    this.addMessage = message => {\n      // Append the message to the component state\n      const messages = this.state.messages;\n      messages.push(message);\n      messages.sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n      this.setState({\n        messages\n      });\n      this.props.handleTyping(false, false);\n      return true;\n    };\n\n    this.setState({\n      messages: []\n    }); // set the initial state of messages so that it is not undefined on load\n\n    this.state = {\n      messages: [],\n      user: JSON.parse(localStorage.getItem('currentUser'))\n    }; // Connect to the server\n\n    this.socket = io(config.api, {\n      query: \"username=\".concat(this.state.user.name)\n    }, {\n      transports: ['websocket', 'polling']\n    }).connect(); // Listen for messages from the server\n\n    this.socket.on('server:message', message => {\n      this.addMessage(message);\n    });\n  }\n\n  componentWillMount() {\n    const sender = this.state.user.name;\n    const receiver = this.props.username;\n    const dispatch = this.props.dispatch;\n    dispatch(chatActions.getMessages(sender, receiver));\n  }\n\n  componentWillReceiveProps(props) {\n    const chats = props.chats;\n    const sender = this.state.user.name;\n    const receiver = this.props.username;\n    let senderMessage = [];\n    let receiverMessage = [];\n    chats.filter((item, index) => {\n      if (item.sender === sender && item.receiver === receiver) {\n        item.messages.map((chat, innerIndex) => {\n          senderMessage[innerIndex] = {\n            'username': sender,\n            'to': receiver,\n            'message': chat[sender],\n            'date': chat['date'],\n            'fromMe': true\n          };\n          this.addMessage(senderMessage[innerIndex]);\n          return true;\n        });\n      }\n\n      if (item.sender === receiver && item.receiver === sender) {\n        item.messages.map((chat, innerIndex) => {\n          receiverMessage[innerIndex] = {\n            'username': receiver,\n            'to': sender,\n            'date': chat['date'],\n            'message': chat[receiver]\n          };\n          this.addMessage(receiverMessage[innerIndex]);\n          return true;\n        });\n      }\n\n      return false;\n    });\n  }\n\n  render() {\n    // Here we want to render the main chat application components\n    return React.createElement(\"div\", {\n      className: \"container chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"chatTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.props.username), React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(ChatInput, {\n      onSend: this.sendHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["/home/user/Navigation-and-api-integration/client/src/components/chat/ChatApp.js"],"names":["React","io","config","Messages","ChatInput","chatActions","ChatApp","Component","constructor","props","sendHandler","message","socket","emit","on","data","handleTyping","disconnect","messageObject","username","state","user","name","to","sender","receiver","date","Date","toString","dispatch","saveMessage","fromMe","addMessage","messages","push","sort","a","b","setState","JSON","parse","localStorage","getItem","api","query","transports","connect","componentWillMount","getMessages","componentWillReceiveProps","chats","senderMessage","receiverMessage","filter","item","index","map","chat","innerIndex","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\nimport config from '../../config';\nimport Messages from './Messages';\nimport ChatInput from './ChatInput';\nimport { chatActions } from '../../redux/chat/chatActions';\n\nclass ChatApp extends React.Component {\n  constructor(props) {\n    super(props);\n   this.setState({\n     messages: []\n   })\n    // set the initial state of messages so that it is not undefined on load\n    this.state = {\n      messages: [],\n      user: JSON.parse(localStorage.getItem('currentUser'))\n    };\n    // Connect to the server\n    this.socket = io(config.api, { query: `username=${this.state.user.name}` }, { transports: ['websocket', 'polling'] }).connect();\n\n    // Listen for messages from the server\n    this.socket.on('server:message', message => {\n      this.addMessage(message);\n    });\n  }\n\n  componentWillMount() {\n    const sender = this.state.user.name;\n    const receiver = this.props.username;\n    const { dispatch } = this.props;\n    dispatch(chatActions.getMessages(sender, receiver))\n  }\n\n  componentWillReceiveProps(props) {\n    const { chats } = props;\n    const sender = this.state.user.name;\n    const receiver = this.props.username;\n    let senderMessage = [];\n    let receiverMessage = []\n    chats.filter((item, index) => {\n      if (item.sender === sender && item.receiver === receiver) {\n        item.messages.map((chat, innerIndex) => {\n          senderMessage[innerIndex] = { 'username': sender, 'to': receiver, 'message': chat[sender], 'date': chat['date'], 'fromMe': true };\n          this.addMessage(senderMessage[innerIndex])\n          return true;\n        })\n      }\n      if (item.sender === receiver && item.receiver === sender) {\n        item.messages.map((chat, innerIndex) => {\n          receiverMessage[innerIndex] = { 'username': receiver, 'to': sender, 'date': chat['date'], 'message': chat[receiver] };\n          this.addMessage(receiverMessage[innerIndex])\n          return true;\n        })\n      }\n      return false;\n    })\n  }\n\n  sendHandler = (message) => {\n    if (message === true) {\n      this.socket.emit('typing')\n      this.socket.on('typing', data => {\n        this.props.handleTyping(message, data)\n        return () => {\n          this.socket.disconnect();\n        };\n      })\n    } else {\n      const messageObject = {\n        username: this.state.user.name,\n        to: this.props.username,\n        message\n      };\n\n      // Dispatch the messages to redux action to be saved into db\n      const sender = this.state.user.name;\n      const receiver = this.props.username;\n      const date = new Date().toString();\n      const { dispatch } = this.props;\n      dispatch(chatActions.saveMessage(sender, receiver, message, date))\n      // Emit the message to the server\n      this.socket.emit('client:message', messageObject);\n\n      messageObject.fromMe = true;\n      this.addMessage(messageObject);\n    }\n  }\n\n  addMessage = (message) => {\n    // Append the message to the component state\n    const messages = this.state.messages;\n    messages.push(message);\n    messages.sort(function (a, b) { return new Date(a.date) - new Date(b.date); });\n    this.setState({ messages });\n    this.props.handleTyping(false, false)\n    return true;\n  }\n\n  render() {\n    // Here we want to render the main chat application components\n    return (\n      <div className=\"container chat\">\n        <h3 className=\"chatTitle\">{this.props.username}</h3>\n        <Messages messages={this.state.messages} />\n        <ChatInput onSend={this.sendHandler} />\n      </div>\n    );\n  }\n\n}\n\nexport default ChatApp;\n"]},"metadata":{},"sourceType":"module"}